{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "521573b0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to Rule-Based Chatbot!\n",
      "You can start typing your queries. Type 'exit' to end the conversation.\n",
      "You: HI\n",
      "Chatbot: Hello! How can I assist you today?\n",
      "You: HII\n",
      "Chatbot: I'm sorry, I didn't understand that. Can you please rephrase?\n"
     ]
    }
   ],
   "source": [
    "import re  # Importing regular expression module for pattern matching\n",
    "\n",
    "def generate_response(user_input):\n",
    "    \"\"\"\n",
    "    Generate a response based on predefined rules.\n",
    "\n",
    "    Parameters:\n",
    "        user_input (str): The input from the user.\n",
    "\n",
    "    Returns:\n",
    "        str: The generated response.\n",
    "    \"\"\"\n",
    "    # Define rules for response generation\n",
    "    if re.search(r'\\bhi\\b|\\bhello\\b', user_input, re.IGNORECASE):\n",
    "        return \"Hello! How can I assist you today?\"\n",
    "    elif re.search(r'\\bbye\\b|\\bgoodbye\\b', user_input, re.IGNORECASE):\n",
    "        return \"Goodbye! Have a great day!\"\n",
    "    else:\n",
    "        return \"I'm sorry, I didn't understand that. Can you please rephrase?\"\n",
    "\n",
    "def main():\n",
    "    \"\"\"\n",
    "    Main function to run the chatbot.\n",
    "    \"\"\"\n",
    "    print(\"Welcome to Rule-Based Chatbot!\")\n",
    "    print(\"You can start typing your queries. Type 'exit' to end the conversation.\")\n",
    "\n",
    "    while True:\n",
    "        user_input = input(\"You: \")\n",
    "        if user_input.lower() == 'exit':\n",
    "            print(\"Chatbot: Goodbye!\")\n",
    "            break\n",
    "        response = generate_response(user_input)\n",
    "        print(\"Chatbot:\", response)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8164ceca",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
