{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f3a5e095",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " | | \n",
      "-----\n",
      " | | \n",
      "-----\n",
      " | | \n",
      "-----\n",
      "Player X, enter your move (row col): 1 0\n",
      "Player move: ['1', '0']\n",
      "Row: 1 Col: 0\n",
      " | | \n",
      "-----\n",
      "X| | \n",
      "-----\n",
      " | | \n",
      "-----\n",
      "Player O, enter your move (row col): 0 1\n",
      "Player move: ['0', '1']\n",
      "Row: 0 Col: 1\n",
      " |O| \n",
      "-----\n",
      "X| | \n",
      "-----\n",
      " | | \n",
      "-----\n",
      "Player X, enter your move (row col): 2 0\n",
      "Player move: ['2', '0']\n",
      "Row: 2 Col: 0\n",
      " |O| \n",
      "-----\n",
      "X| | \n",
      "-----\n",
      "X| | \n",
      "-----\n",
      "Player O, enter your move (row col): 1 1\n",
      "Player move: ['1', '1']\n",
      "Row: 1 Col: 1\n",
      " |O| \n",
      "-----\n",
      "X|O| \n",
      "-----\n",
      "X| | \n",
      "-----\n",
      "Player X, enter your move (row col): 1 2\n",
      "Player move: ['1', '2']\n",
      "Row: 1 Col: 2\n",
      " |O| \n",
      "-----\n",
      "X|O|X\n",
      "-----\n",
      "X| | \n",
      "-----\n",
      "Player O, enter your move (row col): 2 1\n",
      "Player move: ['2', '1']\n",
      "Row: 2 Col: 1\n",
      " |O| \n",
      "-----\n",
      "X|O|X\n",
      "-----\n",
      "X|O| \n",
      "-----\n",
      "Player O wins!\n"
     ]
    }
   ],
   "source": [
    "def main():\n",
    "    board = [[' ']*3 for _ in range(3)]\n",
    "    players = ['X', 'O']\n",
    "    current_player = 0\n",
    "\n",
    "    while True:\n",
    "        display_board(board)\n",
    "        player_move = input(f\"Player {players[current_player]}, enter your move (row col): \").split()\n",
    "        print(\"Player move:\", player_move)  # Debugging print\n",
    "        if len(player_move) != 2:\n",
    "            print(\"Invalid input. Please enter two numbers separated by a space.\")\n",
    "            continue\n",
    "        row, col = map(int, player_move)\n",
    "        print(\"Row:\", row, \"Col:\", col)  # Debugging print\n",
    "\n",
    "        if row < 0 or row >= 3 or col < 0 or col >= 3:\n",
    "            print(\"Invalid move. Row and column must be between 0 and 2.\")\n",
    "            continue\n",
    "\n",
    "        if board[row][col] == ' ':\n",
    "            board[row][col] = players[current_player]\n",
    "            winner = check_winner(board)\n",
    "            if winner:\n",
    "                display_board(board)\n",
    "                print(f\"Player {winner} wins!\")\n",
    "                break\n",
    "            elif is_board_full(board):\n",
    "                display_board(board)\n",
    "                print(\"It's a tie!\")\n",
    "                break\n",
    "            else:\n",
    "                current_player = (current_player + 1) % 2\n",
    "        else:\n",
    "            print(\"That position is already taken. Try again.\")\n",
    "\n",
    "    play_again = input(\"Do you want to play again? (yes/no): \")\n",
    "    if play_again.lower() == 'yes':\n",
    "        main()\n",
    "    else:\n",
    "        print(\"Thanks for playing!\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8922d1dc",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
